#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

#Copyright (C) 2015  David Delgado Hernandez 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


"""
    Este archivo iniciara el entorno para la descarga de los videos
"""
# TODO : la comprobacion de los formatos disponibles en youtube-dl
            # y ffmpeg deberia de realizarse solo una vez


import getopt
import sys
import logging
import os

this_dir = os.path.dirname(os.path.abspath(__file__))
trunk_dir = os.path.split(this_dir)[0]
sys.path.insert(0,trunk_dir)

from ikol.youtube.APIRequest import APIRequest
from ikol.youtube.Auth import Authorized
from ikol.dbregister import DataBase
from ikol.config import Config
from ikol.downloader.Downloader import Downloader
from ikol.directory import Directorio
from ikol.downloader.Convert import Convert
from ikol.tag import Tag

# Declaracion global
config = Config()
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s : %(levelname)s : %(message)s',
    filename = config.getLogFile(),
    filemode='a')


####################### Funciones de Apoyo #######################

def getAuth():
    
    # Objeto del que se obtendran la conexiones con el api
    Auth = Authorized(config.client_secret)
    Auth.getFlow()
    Auth.setStorage(config.storage_path)
    service = Auth.getService()

    return service


def RevisarPlaylist(playlist):
    # Obtiene los datos de la playlist 
    # Devuelve los id de las canciones en lista
    idname = playlist.partition("playlist?list=")[2]
    S = getAuth()
    API = APIRequest(S)
    # verificar la existencia de la playlist dentro de mis propias playlist
    if not idname in API.getSecondPeer(API.getPlaylists()):
        # TODO : Retirar de lista de playlist
        print "La playlist " + idname +" no existe"
        logging.warning("La playlist " + idname +" no existe")
        videos = []

        # si la lista no es propia avisar al usuario 
        print "La lista " + playlist + " no es propia y no se garantiza su integridad"
        logging.warning("Lista inpropia" + playlist)
        try:
            videos = API.getVideosList(idname)
        except Exception, e:
            print e
            logging.debug(str(e))
            videos = []
    else:

        videos = API.getVideosList(idname)

    return videos


def getHistory(playlist):
    # Obtener todos los archivos que ya se descargaron en el pasado
    # Si no existe registro de la playlist crearlo
    idname = playlist.partition("playlist?list=")[2]
    DB = DataBase()
    # TODO : Crea varias entradas en la base de datos
    if DB.playlistExist(idname) == False:        
        API = APIRequest(getAuth())
        lstname = API.getNameList(idname)
        DB.insertPlaylist(idname,lstname)

    videohst = DB.getAllVideosByPlaylist(idname)

    return videohst

def FiltrarRepetidos(video,videohst):

    # Se recibe la lista que proporciona la api 
    # asi que se deben separar la tupla luego comparar con el historial +
    # devolver una lista de tuplas con videos repetidos eliminados
    # [(name,idvideo)]
    rpt = []
    for i in video:
        for x in videohst:
            if i[1] == x[0]:
                # Eliminar el elemento de la lista video
                logging.debug(i[1]+ " video repetido" )
                rpt.append(i)
                break

    for y in rpt:
        video.remove(y)
    return video

def Download(playlist,videos):
    # Descargar los videos
    # Crear un directorio con el nombre de la playlist en el directorio cache
    idname = playlist.partition("playlist?list=")[2]
    print "Preparandose para descargar " + idname
    logging.info("Descargando " + idname)
    API = APIRequest(getAuth())
    lstname = API.getNameList(idname)

    DB = DataBase()
    cache = os.path.join(config.getCacheDir(),lstname)
    D = Directorio(cache)
    logging.info("Directorio cache "+ cache)
    # Separar la lista de videos,nombre descargar el video
    ready = []
    for i in videos:
        # Descargar el video
        idvideo = i[1]
        url = API.FormatURL(idvideo)

        try:
            Down = Downloader(url)
            # TODO : Genera un retardo
            Down.setFormat(config.getFormat())
            Down.setCacheDir(D.path)            
        except Exception, e:
            # no descargar
            print e
            logging.warning("Error al intentar descargar el archivo" + idvideo)
            continue

        print "Descargando video " + i[0]
        logging.info("Inicio Descarga " + i[0])
        if Down.download():
            # Si todo salio bien registrarlo en el historial
            # Obtener el nombre del archivo 
            path = os.path.splitext(i[0])[0] +"."+ Down.ext
            print "Descarga de " + path + " finalizo correctamente"
            logging.info("Descarga de " + path + " finalizada")
            DB.insertVideo(idvideo,idname,i[0])
            ready.append(path)

        else:
            print "Error al descargar el video " +i[0]
            logging.warning("Error al descargar el video " +i[0])

    logging.debug("Archivos listos " + str(ready))
    return ready,D.path



def moveToDest(listfiles,dircache,conv=False):
    # Mover los archivos correctos al directorio destino
    logging.debug(str(listfiles))
    logging.debug(str(dircache))
    rtrn = []
    D = Directorio(dircache)
    dest = os.path.join(config.getFinalDir(),os.path.basename(dircache))

    if conv:
        dest = os.path.join(dest,"conv")

    for i in listfiles:
        if D.FileinDir(i):
            i = D.FileinDir(i)
            # Renombrar el archivo para Filtrar Caracteres non-ascii
            i = D.CleanName(i)
            try:
                print "Moviendo "+ i +" hacia " + dest
                logging.debug("Moviendo " + dest)
                d = D.moveToDest(i,dest)
                rtrn.append(d)
            except Exception, e:
                
                #TODO : hacer algo con este error decode ascii en print
                print e
                logging.debug(e)

        else:
            print "Error Al buscar el archivo " + i
            logging.debug("Error al buscar el archivo " + i)
    return rtrn        

def deletedir(dirs):
    # Elimina el directorio del cache
    logging.info("Eliminando " + str(dirs) + " de la cache")
    for root, dirs, files in os.walk(dirs,topdown=False):
        for name in files:
            obj =  os.path.join(root, name)
            os.remove(obj)
        for name in dirs:
            if not os.path.islink(name):
                os.rmdir(os.path.join(root, name))

        os.rmdir(root)
        logging.info(str(dirs) + " Eliminado")

def ConvDownload(listfiles,dircache):
    # convierte la salida usando ffmpeg o avconv
    # aqui agrego los convertidos para luego moverlos
    output = []


    for i in listfiles:
        logging.info("convirtiendo : "+str(i))

        source = os.path.join(dircache,i)
        conv = Convert(source)
        conv.getBinary()
        conv.setConfig(config.getCodec(),config.getKbps())

        if conv.convert():
            output.append(os.path.basename(conv.dest))
        else:
            logging.debug("Error de conversion: " + conv.dest)

    return output

def options(argv):
    # leer los argumentos de linea de comandos
    # Armar el objeto config para la configuracion global
    keys = {
        "url" : "",
        "format" : 0,
        "cache" : "",
        "regurl": False,
        "regformat" : False,
        "regcache" : False,
        "force" : False,
        "regdest" : False,
        "dest" : "",
        "regcodec" : False,
        "codec" : "",
        "regkbps" : False,
        "kpbs" : "",
        "convert" : False,
        "tag": False,
        "forcetag": False
    }
    # TODO : Lanzar excepciones que detengan la ejecucion del programa
    try:
        options , arg = getopt.getopt(argv, "A:a:v:f:F:c:C:D:u:k:itTO",
                        ["add-url=","url=","video=","format=","set-format=",
                        "cache=","dir-cache=","Destino=","codec=","kpbs=",
                        "force","convert","tag","tagold"])

    except getopt.GetoptError:
        # TODO : Manejar errores
        print "el argumento no es valido"

    for opt , arg in options:
        
        if opt in ("-A","--add-url"):
            if arg:
                keys["url"] = arg
                keys["regurl"] = True
            else:
                print "La opcion necesita un argumento"

        if opt in ("-a","--url"):
            if arg:
                keys["url"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-v","--video"):
            if arg:
                keys["url"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-f","--format"):
            if arg:
                keys["format"] = int(arg)
            else:
                print "La opcion necesita un argumento"

        if opt in ("-F","--set-format"):
            if arg:
                keys["format"] = int(arg)
                keys["regformat"] = True
            else:
                print "La opcion necesita un argumento"

        if opt in ("-c","--cache"):
            if arg:
                keys["cache"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-C","--dir-cache"):
            if arg:
                keys["cache"] = arg
                keys["regcache"] = True
            else:
                print "La opcion necesita un argumento"

        if opt in ("-D","--Destino"):
            if arg:
                keys["regdest"] = True
                keys["dest"] = arg
            else:
                "La opcion necesita un argumento"

        if opt in ("-u","--codec"):
            if arg:
                keys["regcodec"] = True
                keys["codec"] = arg
            else:
                "La opcion necesita un argumento"

        if opt in ("-k","--kpbs"):
            if arg:
                keys["regkbps"] = True
                keys["kbps"] = arg
            else:
                "La opcion necesita un argumento"

        if opt in ("-i","--force"):
            keys["force"] = True

        if opt in ("-t","--convert"):
            keys["convert"] = True


        if opt in ("-T","--tag"):
            keys["tag"] = True

        if opt in ("-O","--tagold") :
            keys["forcetag"] = True

    return keys


def ArmarConfig(keys):
    urllst = []

    # Resolver todas las configuraciones
    # Devuelve una lista con todas las url encontradas

    if keys["regcache"]:
        config.setCacheDir(keys["cache"],True)
    elif keys["cache"] != "":
        config.setCacheDir(keys["cache"])

    if keys["regformat"]:
        config.setFormat(keys["format"],True)
    elif keys["format"] != 0:
        config.setFormat(keys["format"])

    if keys["regdest"]:
        config.setFinalDir(keys["dest"])

    if keys["regurl"]:
        config.addURL(keys["url"])
    else:
        # Agregar lista a objeto downloader
        urllst.append(keys["url"])

    if keys["regcodec"]:
        config.setCodec(keys["codec"])

    if keys["regkbps"]:
        config.setKbps(keys["kpbs"])


    return urllst



####################### Codigo Principal #######################


if __name__ == '__main__':
    logging.info("Inicio de operaciones")
    # Devuelve una diccionario con los argumentos establecidos
    keys  = options(sys.argv[1:])

    urllst = ArmarConfig(keys)

    # Obtener las Url del archivo y unirlas a la lista
    lst = config.getAllURL()

    for i in lst:
        if len(i) > 0:
            urllst.append(i)

    for i in urllst:
        if len(i) == 0:
            urllst.remove(i)
    logging.debug("urllst "+ str(urllst))

    for i in urllst:
        # TODO : Realizar el multihilo
        videos = RevisarPlaylist(i)
        if len(videos) == 0:
            # Saltarse la playlist
            logging.warning("Playlist vacia" + i)
            print i + "vacia"
            continue

        historial = getHistory(i)

        if keys["force"] == False:
            # Descargar todos los videos sin tomar en cuenta el historial
            videos = FiltrarRepetidos(videos,historial)

        # Descargar los Videos
        # TODO : Genera error
        # UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 18: ordinal not in range(128)
        # Habilitarse para eliminar archivos erroneos a futuro
        Download(i,videos)
        # DEBUG:
        dirs = os.listdir(config.getCacheDir())
        # Revisa los directorios del cache
        for y in dirs:
            if os.path.isdir(os.path.join(config.getCacheDir(),y)):
                # lista los archivos contenidos dentro del cache
                dircache = os.path.join(config.getCacheDir(),y)
                # Archivos descargados
                cache = os.listdir(dircache)

                logging.debug("len cache " + str(cache))
                # Mover al directorio definido por el usuario
                if keys["convert"]:
                    # Si el usuario lo especifico Convertir los archivos
                    # me devuelve los nombre limpios utilizarlos para los registros
                    # en la base da datos
                    out = ConvDownload(cache,dircache)
                    out = moveToDest(out,dircache,True)

                #tagear (el m4a no deberia de tagearse) los archivos si el usuario lo quizo

                if keys["convert"] and keys["tag"] and keys["forcetag"]:
                    destconv = os.path.join(config.getFinalDir(),os.path.basename(dircache))
                    destconv = os.path.join(destconv,"conv")
                elif keys["convert"] and keys["tag"] and keys["forcetag"] == False:
                    destconv = os.path.join(config.getFinalDir(),os.path.basename(dircache))
                    destconv = os.path.join(destconv,"conv")
                    if os.path.exists(destconv):
                        print "Se procede a tagear las canciones en: "+destconv
                        tag = Tag(destconv,config.getCodec())
                        if tag.getStatus():
                            tag.loadMusicFiles(out)
                            tag.setTags()

                moveToDest(cache,dircache)
                #TODO : Eliminar los archivos erroneos

                # Eliminar directorio del cache
                deletedir(dircache)

                if keys["convert"] and keys["tag"] and keys["forcetag"]:
                    print "Se procede a tagear las canciones en: "+destconv
                    tag = Tag(destconv,config.getCodec())
                    if tag.getStatus():
                        tag.loadMusicFiles()
                        tag.setTags()
                  



    logging.info("Finaliza operaciones\n\n")