#!/usr/bin/env python2.7

#Copyright (C) 2015  David Delgado Hernandez 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.


"""
    Este archivo iniciara el entorno para la descarga de los videos
"""
import getopt
import sys

import os

this_dir = os.path.dirname(os.path.abspath(__file__))
trunk_dir = os.path.split(this_dir)[0]
sys.path.insert(0,trunk_dir)

from ikol.youtube.APIRequest import APIRequest
from ikol.youtube.Auth import Authorized

from ikol.config import Config
from ikol.downloader.Downloader import Downloader

from ikol.directory import Directorio


def options(argv):
    #leer los argumentos de linea de comandos
    # El modulo config debe de revisar que esta url corresponde a un video 
    # o a una playlist

    keys = {
        "url" : "",
        "format" : 0,
        "cache" : "",
        "regurl": False,
        "regformat" : False,
        "regcache" : False
    }

    try:
        options , arg = getopt.getopt(argv, "A:a:v:f:F:c:C:",
                        ["add-url=","url=","video=","format=","set-format=",
                        "cache=","dir-cache="])

    except getopt.GetoptError:
        # TODO : Manejar errores
        print "el argumento no es valido"

    for opt , arg in options:
        
        if opt in ("-A","--add-url"):
            if arg:
                keys["url"] = arg
                keys["regurl"] = True
            else:
                print "La opcion necesita un argumento"

        if opt in ("-a","--url"):
            if arg:
                keys["url"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-v","--video"):
            if arg:
                keys["url"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-f","--format"):
            if arg:
                keys["format"] = int(arg)
            else:
                print "La opcion necesita un argumento"

        if opt in ("-F","--set-format"):
            if arg:
                keys["format"] = int(arg)
                keys["regformat"] = True
            else:
                print "La opcion necesita un argumento"

        if opt in ("-c","--cache"):
            if arg:
                keys["cache"] = arg
            else:
                print "La opcion necesita un argumento"

        if opt in ("-C","--dir-cache"):
            if arg:
                keys["cache"] = arg
                keys["regcache"] = True
            else:
                print "La opcion necesita un argumento"

    return keys

def downloadlist(playlist,API):
    idname = playlist.partition("playlist?list=")[2]
    # verificar la existencia de la playlist
    if not idname in API.getSecondPeer(API.getPlaylists()):
        # TODO : Lanzar error y log
        return
    # verificar el nombre de la playlist para 
    # identificar el directorio
    name = API.getNameList(idname)

    path = config.getCacheDir() + "/" + name
    Dir = Directorio(config.getCacheDir())
    Dir.createSubDir(path)
    # obtener el ID de la playlist

    lst = API.getVideosList(idname)

    links = API.FormatLst(lst)
    for x in links:
        y = links.index(x)
        print "Descargando: " + lst[y][0]
        D = Downloader(x)

        D.setCacheDir(path)

        D.setFormat(config.getFormat())
        # TODO : Hacer barra de progreso 
        print "Descargado " + D.download()



# Declando global
config = Config()

if __name__ == '__main__':
    # Devuelve una diccionario con los argumentos establecidos
    keys  = options(sys.argv[1:])

    urllst = []


    # Resolver todas las configuraciones

    

    if keys["regcache"]:
        config.setCacheDir(keys["cache"],True)
    elif keys["cache"] != "":
        config.setCacheDir(keys["cache"])

    if keys["regformat"]:
        config.setFormat(keys["format"],True)
    elif keys["format"] != 0:
        config.setFormat(keys["format"])

    if keys["regurl"]:
        config.addURL(keys["url"])
    else:
        # Agregar lista a objeto downloader
        urllst.append(keys["url"])

    # Obtener las Url del archivo y unirlas a la lista
    lst = config.getAllURL()

    for i in lst:
        if len(i) > 0:
            urllst.append(i)

    for i in urllst:
        if len(i) == 0:
            urllst.remove(i)


    # Obtener autorizacion de la API
    # TODO : Revisar si anteriormente se realizo la autorizacion
    #        Cerrar el navegador
    #        obtener el secret_file y storage con get tomando en cuanta
    #        el archivo de configuracion

    Auth = Authorized(config.client_secret)
    Auth.getFlow()
    Auth.setStorage(config.storage_path)

    service = Auth.getService()


    # Obtener las id de los videos de las playlist

    API = APIRequest(service)

    for i in urllst:
        downloadlist(i,API)



    print "Tarea Finalizada"

        